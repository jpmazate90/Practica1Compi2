
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores.Cup;

import Analizadores.Flex.Lexer;
import Instructions.Asignacion;
import Instructions.BaseIf;
import java_cup.runtime.Symbol;
import Objetos.Token;
import Tablas.TablaSimbolos.TablaSimbolos;
import Tablas.TablaTipos.TablaTipos;
import Objetos.Logica;
import Instructions.Instruction;
import Instructions.Print;
import Instructions.Println;
import Objetos.AccionVariable;
import Objetos.Condicional;
import Objetos.Dato;
import Objetos.Expresion;
import java.util.ArrayList;
import Instructions.While;
import Instructions.Declaracion;
import Instructions.DoWhile;
import Instructions.Else;
import Instructions.If;
import Instructions.For;
import Instructions.Elsif;
import Objetos.Arreglo;
import java.util.List;
import java_cup.runtime.XMLElement;
import javax.swing.JTextArea;
import Errores.Errores;
import Errores.Error;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\144\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\004\000\002\004\004" +
    "\000\002\004\004\000\002\004\004\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\004\000\002\004\004\000\002\033\003\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\025\005\000\002\025\005\000\002\025\004\000\002" +
    "\025\004\000\002\034\005\000\002\035\003\000\002\016" +
    "\010\000\002\024\005\000\002\024\003\000\002\007\010" +
    "\000\002\013\003\000\002\013\004\000\002\013\004\000" +
    "\002\013\005\000\002\022\004\000\002\022\003\000\002" +
    "\021\011\000\002\017\006\000\002\020\011\000\002\014" +
    "\011\000\002\014\007\000\002\015\012\000\002\015\010" +
    "\000\002\012\020\000\002\012\016\000\002\036\003\000" +
    "\002\036\003\000\002\010\006\000\002\010\004\000\002" +
    "\011\006\000\002\011\004\000\002\023\005\000\002\023" +
    "\003\000\002\030\005\000\002\030\005\000\002\030\005" +
    "\000\002\030\005\000\002\030\005\000\002\030\004\000" +
    "\002\030\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\006" +
    "\000\002\031\005\000\002\031\005\000\002\031\004\000" +
    "\002\031\003\000\002\032\005\000\002\032\005\000\002" +
    "\032\005\000\002\032\005\000\002\032\005\000\002\032" +
    "\005\000\002\032\003\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\027\006\000\002" +
    "\005\004\000\002\005\003\000\002\006\004\000\002\006" +
    "\005\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\004\000\002\006\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\316\000\042\004\026\005\015\006\014\007\011\010" +
    "\005\011\030\012\042\013\027\021\040\022\022\025\016" +
    "\026\025\027\037\030\034\031\031\055\007\001\002\000" +
    "\004\041\320\001\002\000\006\045\uffef\055\uffef\001\002" +
    "\000\044\002\000\004\026\005\015\006\014\007\011\010" +
    "\005\011\030\012\042\013\027\021\040\022\022\025\016" +
    "\026\025\027\037\030\034\031\031\055\007\001\002\000" +
    "\006\045\313\054\275\001\002\000\004\055\273\001\002" +
    "\000\006\045\ufff0\055\ufff0\001\002\000\046\002\ufff7\004" +
    "\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7" +
    "\013\ufff7\021\ufff7\022\ufff7\025\ufff7\026\ufff7\027\ufff7\030" +
    "\ufff7\031\ufff7\046\ufff7\055\ufff7\001\002\000\004\041\310" +
    "\001\002\000\006\045\ufff1\055\ufff1\001\002\000\006\045" +
    "\ufff2\055\ufff2\001\002\000\004\043\301\001\002\000\004" +
    "\041\300\001\002\000\004\041\277\001\002\000\006\040" +
    "\270\041\271\001\002\000\004\043\262\001\002\000\004" +
    "\041\261\001\002\000\046\002\ufff9\004\ufff9\005\ufff9\006" +
    "\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9\013\ufff9\021\ufff9" +
    "\022\ufff9\025\ufff9\026\ufff9\027\ufff9\030\ufff9\031\ufff9\046" +
    "\ufff9\055\ufff9\001\002\000\022\022\022\025\016\026\025" +
    "\027\037\030\034\031\031\045\246\055\007\001\002\000" +
    "\006\045\ufff3\055\ufff3\001\002\000\006\045\uffec\055\uffec" +
    "\001\002\000\006\045\uffee\055\uffee\001\002\000\024\017" +
    "\067\020\070\045\242\055\060\056\061\057\064\060\063" +
    "\061\057\062\066\001\002\000\052\002\uffe1\004\uffe1\005" +
    "\uffe1\006\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1\013\uffe1" +
    "\021\uffe1\022\uffe1\023\222\024\220\025\uffe1\026\uffe1\027" +
    "\uffe1\030\uffe1\031\uffe1\046\uffe1\055\uffe1\001\002\000\004" +
    "\002\217\001\002\000\024\017\067\020\070\045\211\055" +
    "\060\056\061\057\064\060\063\061\057\062\066\001\002" +
    "\000\046\002\ufff8\004\ufff8\005\ufff8\006\ufff8\007\ufff8\010" +
    "\ufff8\011\ufff8\012\ufff8\013\ufff8\021\ufff8\022\ufff8\025\ufff8" +
    "\026\ufff8\027\ufff8\030\ufff8\031\ufff8\046\ufff8\055\ufff8\001" +
    "\002\000\046\002\ufffe\004\ufffe\005\ufffe\006\ufffe\007\ufffe" +
    "\010\ufffe\011\ufffe\012\ufffe\013\ufffe\021\ufffe\022\ufffe\025" +
    "\ufffe\026\ufffe\027\ufffe\030\ufffe\031\ufffe\046\ufffe\055\ufffe" +
    "\001\002\000\004\043\053\001\002\000\022\004\026\005" +
    "\015\006\014\007\011\010\005\011\030\012\042\013\027" +
    "\001\002\000\046\002\ufff6\004\ufff6\005\ufff6\006\ufff6\007" +
    "\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\021\ufff6\022\ufff6" +
    "\025\ufff6\026\ufff6\027\ufff6\030\ufff6\031\ufff6\046\ufff6\055" +
    "\ufff6\001\002\000\006\045\uffed\055\uffed\001\002\000\004" +
    "\045\044\001\002\000\004\056\045\001\002\000\004\046" +
    "\046\001\002\000\004\055\050\001\002\000\006\040\051" +
    "\041\uffe5\001\002\000\006\040\uffe3\041\uffe3\001\002\000" +
    "\004\055\052\001\002\000\006\040\uffe4\041\uffe4\001\002" +
    "\000\004\055\054\001\002\000\006\037\056\054\055\001" +
    "\002\000\024\017\067\020\070\050\071\055\060\056\061" +
    "\057\064\060\063\061\057\062\066\001\002\000\024\017" +
    "\067\020\070\050\071\055\060\056\061\057\064\060\063" +
    "\061\057\062\066\001\002\000\026\040\uffbf\041\uffbf\042" +
    "\uffbf\044\uffbf\046\uffbf\047\uffbf\050\uffbf\051\uffbf\052\uffbf" +
    "\053\uffbf\001\002\000\030\040\uffc3\041\uffc3\042\uffc3\044" +
    "\uffc3\045\171\046\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3" +
    "\053\uffc3\001\002\000\026\040\uffc2\041\uffc2\042\uffc2\044" +
    "\uffc2\046\uffc2\047\uffc2\050\uffc2\051\uffc2\052\uffc2\053\uffc2" +
    "\001\002\000\026\040\uffc4\041\uffc4\042\uffc4\044\uffc4\046" +
    "\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4\053\uffc4\001\002" +
    "\000\026\040\uffc0\041\uffc0\042\uffc0\044\uffc0\046\uffc0\047" +
    "\uffc0\050\uffc0\051\uffc0\052\uffc0\053\uffc0\001\002\000\026" +
    "\040\uffc1\041\uffc1\042\uffc1\044\uffc1\046\uffc1\047\uffc1\050" +
    "\uffc1\051\uffc1\052\uffc1\053\uffc1\001\002\000\016\042\105" +
    "\047\076\050\073\051\074\052\077\053\075\001\002\000" +
    "\026\040\uffbe\041\uffbe\042\uffbe\044\uffbe\046\uffbe\047\uffbe" +
    "\050\uffbe\051\uffbe\052\uffbe\053\uffbe\001\002\000\026\040" +
    "\uffbd\041\uffbd\042\uffbd\044\uffbd\046\uffbd\047\uffbd\050\uffbd" +
    "\051\uffbd\052\uffbd\053\uffbd\001\002\000\026\040\uffbc\041" +
    "\uffbc\042\uffbc\044\uffbc\046\uffbc\047\uffbc\050\uffbc\051\uffbc" +
    "\052\uffbc\053\uffbc\001\002\000\024\017\067\020\070\050" +
    "\071\055\060\056\061\057\064\060\063\061\057\062\066" +
    "\001\002\000\026\040\uffc5\041\uffc5\042\uffc5\044\uffc5\046" +
    "\uffc5\047\uffc5\050\uffc5\051\074\052\077\053\075\001\002" +
    "\000\024\017\067\020\070\050\071\055\060\056\061\057" +
    "\064\060\063\061\057\062\066\001\002\000\024\017\067" +
    "\020\070\050\071\055\060\056\061\057\064\060\063\061" +
    "\057\062\066\001\002\000\024\017\067\020\070\050\071" +
    "\055\060\056\061\057\064\060\063\061\057\062\066\001" +
    "\002\000\024\017\067\020\070\050\071\055\060\056\061" +
    "\057\064\060\063\061\057\062\066\001\002\000\024\017" +
    "\067\020\070\050\071\055\060\056\061\057\064\060\063" +
    "\061\057\062\066\001\002\000\026\040\uffc7\041\uffc7\042" +
    "\uffc7\044\uffc7\046\uffc7\047\uffc7\050\uffc7\051\uffc7\052\uffc7" +
    "\053\uffc7\001\002\000\026\040\uffca\041\uffca\042\uffca\044" +
    "\uffca\046\uffca\047\uffca\050\uffca\051\074\052\077\053\075" +
    "\001\002\000\026\040\uffc6\041\uffc6\042\uffc6\044\uffc6\046" +
    "\uffc6\047\uffc6\050\uffc6\051\uffc6\052\uffc6\053\uffc6\001\002" +
    "\000\026\040\uffc8\041\uffc8\042\uffc8\044\uffc8\046\uffc8\047" +
    "\uffc8\050\uffc8\051\uffc8\052\uffc8\053\uffc8\001\002\000\026" +
    "\040\uffc9\041\uffc9\042\uffc9\044\uffc9\046\uffc9\047\uffc9\050" +
    "\uffc9\051\074\052\077\053\075\001\002\000\022\014\117" +
    "\017\116\020\120\055\111\056\112\057\114\060\113\061" +
    "\107\001\002\000\010\015\122\016\123\042\145\001\002" +
    "\000\026\015\uffa9\016\uffa9\032\uffa9\033\uffa9\034\uffa9\035" +
    "\uffa9\036\uffa9\037\uffa9\042\uffa9\044\uffa9\001\002\000\026" +
    "\015\uffb0\016\uffb0\032\133\033\134\034\135\035\136\036" +
    "\132\037\131\042\uffb0\044\uffb0\001\002\000\030\015\uffaf" +
    "\016\uffaf\032\uffaf\033\uffaf\034\uffaf\035\uffaf\036\uffaf\037" +
    "\uffaf\042\uffaf\044\uffaf\045\126\001\002\000\026\015\uffac" +
    "\016\uffac\032\uffac\033\uffac\034\uffac\035\uffac\036\uffac\037" +
    "\uffac\042\uffac\044\uffac\001\002\000\026\015\uffaa\016\uffaa" +
    "\032\uffaa\033\uffaa\034\uffaa\035\uffaa\036\uffaa\037\uffaa\042" +
    "\uffaa\044\uffaa\001\002\000\026\015\uffab\016\uffab\032\uffab" +
    "\033\uffab\034\uffab\035\uffab\036\uffab\037\uffab\042\uffab\044" +
    "\uffab\001\002\000\012\015\uffb7\016\uffb7\042\uffb7\044\uffb7" +
    "\001\002\000\026\015\uffae\016\uffae\032\uffae\033\uffae\034" +
    "\uffae\035\uffae\036\uffae\037\uffae\042\uffae\044\uffae\001\002" +
    "\000\022\014\117\017\116\020\120\055\111\056\112\057" +
    "\114\060\113\061\107\001\002\000\026\015\uffad\016\uffad" +
    "\032\uffad\033\uffad\034\uffad\035\uffad\036\uffad\037\uffad\042" +
    "\uffad\044\uffad\001\002\000\012\015\uffb8\016\uffb8\042\uffb8" +
    "\044\uffb8\001\002\000\022\014\117\017\116\020\120\055" +
    "\111\056\112\057\114\060\113\061\107\001\002\000\022" +
    "\014\117\017\116\020\120\055\111\056\112\057\114\060" +
    "\113\061\107\001\002\000\012\015\122\016\uffba\042\uffba" +
    "\044\uffba\001\002\000\012\015\uffb9\016\uffb9\042\uffb9\044" +
    "\uffb9\001\002\000\004\056\127\001\002\000\004\046\130" +
    "\001\002\000\026\015\uffa8\016\uffa8\032\uffa8\033\uffa8\034" +
    "\uffa8\035\uffa8\036\uffa8\037\uffa8\042\uffa8\044\uffa8\001\002" +
    "\000\020\017\116\020\120\055\111\056\112\057\114\060" +
    "\113\061\107\001\002\000\020\017\116\020\120\055\111" +
    "\056\112\057\114\060\113\061\107\001\002\000\020\017" +
    "\116\020\120\055\111\056\112\057\114\060\113\061\107" +
    "\001\002\000\020\017\116\020\120\055\111\056\112\057" +
    "\114\060\113\061\107\001\002\000\020\017\116\020\120" +
    "\055\111\056\112\057\114\060\113\061\107\001\002\000" +
    "\020\017\116\020\120\055\111\056\112\057\114\060\113" +
    "\061\107\001\002\000\012\015\uffb4\016\uffb4\042\uffb4\044" +
    "\uffb4\001\002\000\012\015\uffb3\016\uffb3\042\uffb3\044\uffb3" +
    "\001\002\000\012\015\uffb6\016\uffb6\042\uffb6\044\uffb6\001" +
    "\002\000\012\015\uffb5\016\uffb5\042\uffb5\044\uffb5\001\002" +
    "\000\012\015\uffb2\016\uffb2\042\uffb2\044\uffb2\001\002\000" +
    "\012\015\uffb1\016\uffb1\042\uffb1\044\uffb1\001\002\000\006" +
    "\047\147\050\146\001\002\000\024\017\uffd1\020\uffd1\050" +
    "\uffd1\055\uffd1\056\uffd1\057\uffd1\060\uffd1\061\uffd1\062\uffd1" +
    "\001\002\000\024\017\uffd2\020\uffd2\050\uffd2\055\uffd2\056" +
    "\uffd2\057\uffd2\060\uffd2\061\uffd2\062\uffd2\001\002\000\024" +
    "\017\067\020\070\050\071\055\060\056\061\057\064\060" +
    "\063\061\057\062\066\001\002\000\016\044\152\047\076" +
    "\050\073\051\074\052\077\053\075\001\002\000\020\022" +
    "\022\025\016\026\025\027\037\030\034\031\031\055\007" +
    "\001\002\000\004\041\167\001\002\000\046\002\uffa3\004" +
    "\uffa3\005\uffa3\006\uffa3\007\uffa3\010\uffa3\011\uffa3\012\uffa3" +
    "\013\uffa3\021\uffa3\022\uffa3\025\uffa3\026\uffa3\027\uffa3\030" +
    "\uffa3\031\uffa3\046\uffa3\055\uffa3\001\002\000\004\041\166" +
    "\001\002\000\046\002\uffa1\004\uffa1\005\uffa1\006\uffa1\007" +
    "\uffa1\010\uffa1\011\uffa1\012\uffa1\013\uffa1\021\uffa1\022\uffa1" +
    "\025\uffa1\026\uffa1\027\uffa1\030\uffa1\031\uffa1\046\uffa1\055" +
    "\uffa1\001\002\000\004\041\165\001\002\000\046\002\uffa2" +
    "\004\uffa2\005\uffa2\006\uffa2\007\uffa2\010\uffa2\011\uffa2\012" +
    "\uffa2\013\uffa2\021\uffa2\022\uffa2\025\uffa2\026\uffa2\027\uffa2" +
    "\030\uffa2\031\uffa2\046\uffa2\055\uffa2\001\002\000\046\002" +
    "\uffa0\004\uffa0\005\uffa0\006\uffa0\007\uffa0\010\uffa0\011\uffa0" +
    "\012\uffa0\013\uffa0\021\uffa0\022\uffa0\025\uffa0\026\uffa0\027" +
    "\uffa0\030\uffa0\031\uffa0\046\uffa0\055\uffa0\001\002\000\004" +
    "\041\164\001\002\000\046\002\uffd3\004\uffd3\005\uffd3\006" +
    "\uffd3\007\uffd3\010\uffd3\011\uffd3\012\uffd3\013\uffd3\021\uffd3" +
    "\022\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\046" +
    "\uffd3\055\uffd3\001\002\000\046\002\uff9e\004\uff9e\005\uff9e" +
    "\006\uff9e\007\uff9e\010\uff9e\011\uff9e\012\uff9e\013\uff9e\021" +
    "\uff9e\022\uff9e\025\uff9e\026\uff9e\027\uff9e\030\uff9e\031\uff9e" +
    "\046\uff9e\055\uff9e\001\002\000\046\002\uffa5\004\uffa5\005" +
    "\uffa5\006\uffa5\007\uffa5\010\uffa5\011\uffa5\012\uffa5\013\uffa5" +
    "\021\uffa5\022\uffa5\025\uffa5\026\uffa5\027\uffa5\030\uffa5\031" +
    "\uffa5\046\uffa5\055\uffa5\001\002\000\046\002\uff9f\004\uff9f" +
    "\005\uff9f\006\uff9f\007\uff9f\010\uff9f\011\uff9f\012\uff9f\013" +
    "\uff9f\021\uff9f\022\uff9f\025\uff9f\026\uff9f\027\uff9f\030\uff9f" +
    "\031\uff9f\046\uff9f\055\uff9f\001\002\000\004\041\170\001" +
    "\002\000\046\002\uffa4\004\uffa4\005\uffa4\006\uffa4\007\uffa4" +
    "\010\uffa4\011\uffa4\012\uffa4\013\uffa4\021\uffa4\022\uffa4\025" +
    "\uffa4\026\uffa4\027\uffa4\030\uffa4\031\uffa4\046\uffa4\055\uffa4" +
    "\001\002\000\024\017\067\020\070\050\071\055\060\056" +
    "\061\057\064\060\063\061\057\062\066\001\002\000\016" +
    "\046\173\047\076\050\073\051\074\052\077\053\075\001" +
    "\002\000\026\040\uffbb\041\uffbb\042\uffbb\044\uffbb\046\uffbb" +
    "\047\uffbb\050\uffbb\051\uffbb\052\uffbb\053\uffbb\001\002\000" +
    "\016\042\175\047\076\050\073\051\074\052\077\053\075" +
    "\001\002\000\022\014\117\017\116\020\120\055\111\056" +
    "\112\057\114\060\113\061\107\001\002\000\010\015\122" +
    "\016\123\042\177\001\002\000\006\047\147\050\146\001" +
    "\002\000\024\017\067\020\070\050\071\055\060\056\061" +
    "\057\064\060\063\061\057\062\066\001\002\000\016\044" +
    "\202\047\076\050\073\051\074\052\077\053\075\001\002" +
    "\000\004\045\203\001\002\000\020\022\022\025\016\026" +
    "\025\027\037\030\034\031\031\055\007\001\002\000\022" +
    "\022\uffa6\025\uffa6\026\uffa6\027\uffa6\030\uffa6\031\uffa6\046" +
    "\uffa6\055\uffa6\001\002\000\022\022\022\025\016\026\025" +
    "\027\037\030\034\031\031\046\206\055\007\001\002\000" +
    "\046\002\uffd4\004\uffd4\005\uffd4\006\uffd4\007\uffd4\010\uffd4" +
    "\011\uffd4\012\uffd4\013\uffd4\021\uffd4\022\uffd4\025\uffd4\026" +
    "\uffd4\027\uffd4\030\uffd4\031\uffd4\046\uffd4\055\uffd4\001\002" +
    "\000\022\022\uffa7\025\uffa7\026\uffa7\027\uffa7\030\uffa7\031" +
    "\uffa7\046\uffa7\055\uffa7\001\002\000\004\041\uffcf\001\002" +
    "\000\022\017\067\020\070\055\060\056\061\057\064\060" +
    "\063\061\057\062\066\001\002\000\006\040\uffcb\046\uffcb" +
    "\001\002\000\006\040\215\046\214\001\002\000\004\041" +
    "\uffd0\001\002\000\022\017\067\020\070\055\060\056\061" +
    "\057\064\060\063\061\057\062\066\001\002\000\006\040" +
    "\uffcc\046\uffcc\001\002\000\004\002\001\001\002\000\004" +
    "\045\236\001\002\000\052\002\uffdc\004\uffdc\005\uffdc\006" +
    "\uffdc\007\uffdc\010\uffdc\011\uffdc\012\uffdc\013\uffdc\021\uffdc" +
    "\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc\030" +
    "\uffdc\031\uffdc\046\uffdc\055\uffdc\001\002\000\004\043\227" +
    "\001\002\000\052\002\uffe0\004\uffe0\005\uffe0\006\uffe0\007" +
    "\uffe0\010\uffe0\011\uffe0\012\uffe0\013\uffe0\021\uffe0\022\uffe0" +
    "\023\222\024\220\025\uffe0\026\uffe0\027\uffe0\030\uffe0\031" +
    "\uffe0\046\uffe0\055\uffe0\001\002\000\046\002\uffdf\004\uffdf" +
    "\005\uffdf\006\uffdf\007\uffdf\010\uffdf\011\uffdf\012\uffdf\013" +
    "\uffdf\021\uffdf\022\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf" +
    "\031\uffdf\046\uffdf\055\uffdf\001\002\000\052\002\uffdd\004" +
    "\uffdd\005\uffdd\006\uffdd\007\uffdd\010\uffdd\011\uffdd\012\uffdd" +
    "\013\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026" +
    "\uffdd\027\uffdd\030\uffdd\031\uffdd\046\uffdd\055\uffdd\001\002" +
    "\000\046\002\uffde\004\uffde\005\uffde\006\uffde\007\uffde\010" +
    "\uffde\011\uffde\012\uffde\013\uffde\021\uffde\022\uffde\025\uffde" +
    "\026\uffde\027\uffde\030\uffde\031\uffde\046\uffde\055\uffde\001" +
    "\002\000\022\014\117\017\116\020\120\055\111\056\112" +
    "\057\114\060\113\061\107\001\002\000\010\015\122\016" +
    "\123\044\231\001\002\000\004\045\232\001\002\000\042" +
    "\004\026\005\015\006\014\007\011\010\005\011\030\012" +
    "\042\013\027\021\040\022\022\025\016\026\025\027\037" +
    "\030\034\031\031\055\007\001\002\000\044\004\026\005" +
    "\015\006\014\007\011\010\005\011\030\012\042\013\027" +
    "\021\040\022\022\025\016\026\025\027\037\030\034\031" +
    "\031\046\234\055\007\001\002\000\052\002\uffd9\004\uffd9" +
    "\005\uffd9\006\uffd9\007\uffd9\010\uffd9\011\uffd9\012\uffd9\013" +
    "\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9" +
    "\027\uffd9\030\uffd9\031\uffd9\046\uffd9\055\uffd9\001\002\000" +
    "\046\002\uffff\004\uffff\005\uffff\006\uffff\007\uffff\010\uffff" +
    "\011\uffff\012\uffff\013\uffff\021\uffff\022\uffff\025\uffff\026" +
    "\uffff\027\uffff\030\uffff\031\uffff\046\uffff\055\uffff\001\002" +
    "\000\042\004\026\005\015\006\014\007\011\010\005\011" +
    "\030\012\042\013\027\021\040\022\022\025\016\026\025" +
    "\027\037\030\034\031\031\055\007\001\002\000\044\004" +
    "\026\005\015\006\014\007\011\010\005\011\030\012\042" +
    "\013\027\021\040\022\022\025\016\026\025\027\037\030" +
    "\034\031\031\046\240\055\007\001\002\000\046\002\uffda" +
    "\004\uffda\005\uffda\006\uffda\007\uffda\010\uffda\011\uffda\012" +
    "\uffda\013\uffda\021\uffda\022\uffda\025\uffda\026\uffda\027\uffda" +
    "\030\uffda\031\uffda\046\uffda\055\uffda\001\002\000\004\041" +
    "\uffcd\001\002\000\022\017\067\020\070\055\060\056\061" +
    "\057\064\060\063\061\057\062\066\001\002\000\006\040" +
    "\215\046\244\001\002\000\004\041\uffce\001\002\000\004" +
    "\025\255\001\002\000\020\022\022\025\016\026\025\027" +
    "\037\030\034\031\031\055\007\001\002\000\022\022\022" +
    "\025\016\026\025\027\037\030\034\031\031\046\250\055" +
    "\007\001\002\000\004\025\251\001\002\000\004\043\252" +
    "\001\002\000\022\014\117\017\116\020\120\055\111\056" +
    "\112\057\114\060\113\061\107\001\002\000\010\015\122" +
    "\016\123\044\254\001\002\000\046\002\uffd6\004\uffd6\005" +
    "\uffd6\006\uffd6\007\uffd6\010\uffd6\011\uffd6\012\uffd6\013\uffd6" +
    "\021\uffd6\022\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6\031" +
    "\uffd6\046\uffd6\055\uffd6\001\002\000\004\043\256\001\002" +
    "\000\022\014\117\017\116\020\120\055\111\056\112\057" +
    "\114\060\113\061\107\001\002\000\010\015\122\016\123" +
    "\044\260\001\002\000\046\002\uffd5\004\uffd5\005\uffd5\006" +
    "\uffd5\007\uffd5\010\uffd5\011\uffd5\012\uffd5\013\uffd5\021\uffd5" +
    "\022\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\046" +
    "\uffd5\055\uffd5\001\002\000\046\002\ufffc\004\ufffc\005\ufffc" +
    "\006\ufffc\007\ufffc\010\ufffc\011\ufffc\012\ufffc\013\ufffc\021" +
    "\ufffc\022\ufffc\025\ufffc\026\ufffc\027\ufffc\030\ufffc\031\ufffc" +
    "\046\ufffc\055\ufffc\001\002\000\022\014\117\017\116\020" +
    "\120\055\111\056\112\057\114\060\113\061\107\001\002" +
    "\000\010\015\122\016\123\044\264\001\002\000\004\045" +
    "\265\001\002\000\042\004\026\005\015\006\014\007\011" +
    "\010\005\011\030\012\042\013\027\021\040\022\022\025" +
    "\016\026\025\027\037\030\034\031\031\055\007\001\002" +
    "\000\044\004\026\005\015\006\014\007\011\010\005\011" +
    "\030\012\042\013\027\021\040\022\022\025\016\026\025" +
    "\027\037\030\034\031\031\046\267\055\007\001\002\000" +
    "\052\002\uffdb\004\uffdb\005\uffdb\006\uffdb\007\uffdb\010\uffdb" +
    "\011\uffdb\012\uffdb\013\uffdb\021\uffdb\022\uffdb\023\uffdb\024" +
    "\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb\046\uffdb" +
    "\055\uffdb\001\002\000\004\055\273\001\002\000\046\002" +
    "\ufffd\004\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd" +
    "\012\ufffd\013\ufffd\021\ufffd\022\ufffd\025\ufffd\026\ufffd\027" +
    "\ufffd\030\ufffd\031\ufffd\046\ufffd\055\ufffd\001\002\000\006" +
    "\040\uffea\041\uffea\001\002\000\010\040\uffe6\041\uffe6\054" +
    "\275\001\002\000\006\040\uffeb\041\uffeb\001\002\000\024" +
    "\017\067\020\070\050\071\055\060\056\061\057\064\060" +
    "\063\061\057\062\066\001\002\000\020\040\uffe7\041\uffe7" +
    "\047\076\050\073\051\074\052\077\053\075\001\002\000" +
    "\046\002\ufffb\004\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb" +
    "\011\ufffb\012\ufffb\013\ufffb\021\ufffb\022\ufffb\025\ufffb\026" +
    "\ufffb\027\ufffb\030\ufffb\031\ufffb\046\ufffb\055\ufffb\001\002" +
    "\000\046\002\ufff5\004\ufff5\005\ufff5\006\ufff5\007\ufff5\010" +
    "\ufff5\011\ufff5\012\ufff5\013\ufff5\021\ufff5\022\ufff5\025\ufff5" +
    "\026\ufff5\027\ufff5\030\ufff5\031\ufff5\046\ufff5\055\ufff5\001" +
    "\002\000\022\014\117\017\116\020\120\055\111\056\112" +
    "\057\114\060\113\061\107\001\002\000\010\015\122\016" +
    "\123\044\303\001\002\000\022\022\022\025\016\026\025" +
    "\027\037\030\034\031\031\045\305\055\007\001\002\000" +
    "\046\002\uffd7\004\uffd7\005\uffd7\006\uffd7\007\uffd7\010\uffd7" +
    "\011\uffd7\012\uffd7\013\uffd7\021\uffd7\022\uffd7\025\uffd7\026" +
    "\uffd7\027\uffd7\030\uffd7\031\uffd7\046\uffd7\055\uffd7\001\002" +
    "\000\020\022\022\025\016\026\025\027\037\030\034\031" +
    "\031\055\007\001\002\000\022\022\022\025\016\026\025" +
    "\027\037\030\034\031\031\046\307\055\007\001\002\000" +
    "\046\002\uffd8\004\uffd8\005\uffd8\006\uffd8\007\uffd8\010\uffd8" +
    "\011\uffd8\012\uffd8\013\uffd8\021\uffd8\022\uffd8\025\uffd8\026" +
    "\uffd8\027\uffd8\030\uffd8\031\uffd8\046\uffd8\055\uffd8\001\002" +
    "\000\046\002\ufff4\004\ufff4\005\ufff4\006\ufff4\007\ufff4\010" +
    "\ufff4\011\ufff4\012\ufff4\013\ufff4\021\ufff4\022\ufff4\025\ufff4" +
    "\026\ufff4\027\ufff4\030\ufff4\031\ufff4\046\ufff4\055\ufff4\001" +
    "\002\000\006\040\uffe8\041\uffe8\001\002\000\006\040\uffe9" +
    "\041\uffe9\001\002\000\004\056\314\001\002\000\004\046" +
    "\315\001\002\000\004\054\316\001\002\000\024\017\067" +
    "\020\070\050\071\055\060\056\061\057\064\060\063\061" +
    "\057\062\066\001\002\000\016\041\uffe2\047\076\050\073" +
    "\051\074\052\077\053\075\001\002\000\046\002\ufffa\004" +
    "\ufffa\005\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa" +
    "\013\ufffa\021\ufffa\022\ufffa\025\ufffa\026\ufffa\027\ufffa\030" +
    "\ufffa\031\ufffa\046\ufffa\055\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\316\000\040\002\032\003\005\004\035\007\003\010" +
    "\016\011\012\012\040\013\023\014\034\015\011\016\017" +
    "\021\031\025\020\033\007\034\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\004\234\007\003\010\016" +
    "\011\012\012\040\013\023\014\034\015\011\016\017\021" +
    "\031\025\020\033\007\034\022\001\001\000\002\001\001" +
    "\000\006\034\311\035\310\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\006\244\007\152\010\154\011" +
    "\161\012\160\013\153\014\157\015\155\021\031\034\156" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\240\001\001\000\010\017\223\020\220" +
    "\022\222\001\001\000\002\001\001\000\004\026\207\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\033\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\026\061\030\173\001\001\000" +
    "\006\026\061\030\064\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\026\061\030" +
    "\071\001\001\000\002\001\001\000\006\026\061\030\103" +
    "\001\001\000\006\026\061\030\102\001\001\000\006\026" +
    "\061\030\101\001\001\000\006\026\061\030\100\001\001" +
    "\000\006\026\061\030\077\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\027\107\031\105\032\114\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\027\107" +
    "\031\120\032\114\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\027\107\031\124\032\114\001\001\000\010" +
    "\027\107\031\123\032\114\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\027\143\001\001\000\004\027\142\001" +
    "\001\000\004\027\141\001\001\000\004\027\140\001\001" +
    "\000\004\027\137\001\001\000\004\027\136\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\036" +
    "\147\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\026\061\030\150\001\001\000\002\001\001\000\026\006" +
    "\162\007\152\010\154\011\161\012\160\013\153\014\157" +
    "\015\155\021\031\034\156\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\026\061\030\171\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\027\107\031\175\032" +
    "\114\001\001\000\002\001\001\000\004\036\177\001\001" +
    "\000\006\026\061\030\200\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\005\204\006\203\007\152\010\154" +
    "\011\161\012\160\013\153\014\157\015\155\021\031\034" +
    "\156\001\001\000\002\001\001\000\026\006\206\007\152" +
    "\010\154\011\161\012\160\013\153\014\157\015\155\021" +
    "\031\034\156\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\023\212\026\211\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\026\215\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\017\225\020\224\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\027\107\031\227\032\114" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\003" +
    "\232\004\035\007\003\010\016\011\012\012\040\013\023" +
    "\014\034\015\011\016\017\021\031\025\020\033\007\034" +
    "\022\001\001\000\034\004\234\007\003\010\016\011\012" +
    "\012\040\013\023\014\034\015\011\016\017\021\031\025" +
    "\020\033\007\034\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\003\236\004\035\007\003\010\016\011" +
    "\012\012\040\013\023\014\034\015\011\016\017\021\031" +
    "\025\020\033\007\034\022\001\001\000\034\004\234\007" +
    "\003\010\016\011\012\012\040\013\023\014\034\015\011" +
    "\016\017\021\031\025\020\033\007\034\022\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\023\242\026\211" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\005\246\006\203\007\152\010\154\011\161" +
    "\012\160\013\153\014\157\015\155\021\031\034\156\001" +
    "\001\000\026\006\206\007\152\010\154\011\161\012\160" +
    "\013\153\014\157\015\155\021\031\034\156\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\027\107\031\252" +
    "\032\114\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\027\107\031\256\032\114\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\027\107\031\262\032\114\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\003\265\004\035\007\003\010" +
    "\016\011\012\012\040\013\023\014\034\015\011\016\017" +
    "\021\031\025\020\033\007\034\022\001\001\000\034\004" +
    "\234\007\003\010\016\011\012\012\040\013\023\014\034" +
    "\015\011\016\017\021\031\025\020\033\007\034\022\001" +
    "\001\000\002\001\001\000\006\034\273\035\271\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\026\061\030\275\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\027" +
    "\107\031\301\032\114\001\001\000\002\001\001\000\026" +
    "\006\303\007\152\010\154\011\161\012\160\013\153\014" +
    "\157\015\155\021\031\034\156\001\001\000\002\001\001" +
    "\000\030\005\305\006\203\007\152\010\154\011\161\012" +
    "\160\013\153\014\157\015\155\021\031\034\156\001\001" +
    "\000\026\006\206\007\152\010\154\011\161\012\160\013" +
    "\153\014\157\015\155\021\031\034\156\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\026\061\030\316\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    TablaSimbolos tablaSimbolos;
    TablaTipos tablaTipos;
    Logica logica;
    JTextArea area;


    public parser(Lexer lex,TablaSimbolos tablaSimbolos,TablaTipos tablaTipos,JTextArea area) {
        super(lex);
        this.tablaSimbolos = tablaSimbolos;
        this.tablaTipos = tablaTipos;
        logica = new Logica();
        this.area=area;
    }


  public void syntax_error(Symbol cur_token) {
        
        System.out.println("OCURRIO UN ERROR SINTACTICO, FILA: " + cur_token.left + ", COLUMNA: " +cur_token.right + " TOKEN:" +cur_token.value);
	Errores.crearError("SINTACTICO","OCURRIO UN ERROR SINTACTICO CON EL TOKEN: "+cur_token.value,cur_token.left,cur_token.right);
	Error error = Errores.ultimoError();
	logica.mostrarError(error,area);
    }
    
	


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= global EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // global ::= instructions 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Instruction> e = (List<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	logica.operar(e,area);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("global",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instructions ::= instructions instruction 
            {
              List<Instruction> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruction> e1 = (List<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Instruction> e2 = (List<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		for(int i =0;i<e2.size();i++){
			e1.add(e2.get(i));
		}
		RESULT = e1;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instructions",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instructions ::= instruction 
            {
              List<Instruction> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Instruction> e = (List<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instructions",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruction ::= variables PUNTO_COMA 
            {
              List<Instruction> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<AccionVariable> lista = (List<AccionVariable>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
List instructions = new ArrayList<>();

	for(int i=0;i<lista.size();i++){
		
		Object valor = null;
			if(lista.get(i).getTipoDato().equals("String")){
			 valor = "a";
			}else if(lista.get(i).getTipoDato().equals("Integer")){
			 valor = 1;
			}else if(lista.get(i).getTipoDato().equals("Byte")){
			Byte bytee = 2;
			valor = bytee;
			}else if(lista.get(i).getTipoDato().equals("Long")){
			Long longg= Long.parseLong("1");
			valor = longg;
			}else if(lista.get(i).getTipoDato().equals("Float")){
			Float floatt = 1.1f;
			valor = floatt;
			}else if(lista.get(i).getTipoDato().equals("Double")){
			valor = 5.5;
			}else if(lista.get(i).getTipoDato().equals("Boolean")){
			valor = true;
			}else if(lista.get(i).getTipoDato().equals("Char")){
			valor = "a";
			}
			Declaracion declaracion = new Declaracion(lista.get(i).getId(), tablaSimbolos, tablaTipos, false, valor,null);
			instructions.add(declaracion);
			
			if(lista.get(i).getTipoAccion().equals("ASIGNACION")){
				Asignacion asignacion = new Asignacion(lista.get(i).getId(), 1, lista.get(i).getExpresion(),false,null,tablaSimbolos,tablaTipos);
				instructions.add(asignacion);
			}	
	}

		RESULT = instructions;
		
	
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruction ::= asignacion PUNTO_COMA 
            {
              List<Instruction> RESULT =null;
		int accionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int accionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AccionVariable accion = (AccionVariable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
									List<Instruction> instructions = new ArrayList<>();
                  Asignacion asignacion = new Asignacion(accion.getId(), 1, accion.getExpresion(),false,null,tablaSimbolos,tablaTipos);
									instructions.add(asignacion);
									RESULT = instructions;
				
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruction ::= arreglos PUNTO_COMA 
            {
              List<Instruction> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Arreglo e = (Arreglo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		List<Instruction> instructions = new ArrayList<>();

		for(int i=0;i<e.getLista().size();i++){
		
		Object valor = null;
			if(e.getTipo().equals("String")){
			 valor = "a";
			}else if(e.getTipo().equals("Integer")){
			 valor = 1;
			}else if(e.getTipo().equals("Byte")){
			Byte bytee = 2;
			valor = bytee;
			}else if(e.getTipo().equals("Long")){
			Long longg= Long.parseLong("1");
			valor = longg;
			}else if(e.getTipo().equals("Float")){
			Float floatt = 1.1f;
			valor = floatt;
			}else if(e.getTipo().equals("Double")){
			valor = 5.5;
			}else if(e.getTipo().equals("Boolean")){
			valor = true;
			}else if(e.getTipo().equals("Char")){
			valor = "a";
			}
			Declaracion declaracion = new Declaracion(e.getLista().get(i), tablaSimbolos, tablaTipos, true, valor,e.getExpresion());
			instructions.add(declaracion);
		}		
		RESULT = instructions;
	
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruction ::= asignacion_arreglos PUNTO_COMA 
            {
              List<Instruction> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruction> e = (List<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  
		
		RESULT = e;
	
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruction ::= estructura_if 
            {
              List<Instruction> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Instruction> e = (List<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruction ::= estructura_while 
            {
              List<Instruction> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Instruction> e = (List<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruction ::= estructura_do_while 
            {
              List<Instruction> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Instruction> e = (List<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruction ::= estructura_for 
            {
              List<Instruction> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Instruction> e = (List<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruction ::= estructura_print PUNTO_COMA 
            {
              List<Instruction> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruction> e = (List<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruction ::= estructura_println PUNTO_COMA 
            {
              List<Instruction> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruction> e = (List<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tipo ::= BOOLEAN 
            {
              String RESULT =null;
		RESULT="Boolean";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tipo ::= CHAR 
            {
              String RESULT =null;
		RESULT="Char";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tipo ::= BYTE 
            {
              String RESULT =null;
		RESULT="Byte";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tipo ::= INT 
            {
              String RESULT =null;
		RESULT="Integer";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tipo ::= LONG 
            {
              String RESULT =null;
		RESULT="Long";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tipo ::= FLOAT 
            {
              String RESULT =null;
		RESULT="Float";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // tipo ::= DOUBLE 
            {
              String RESULT =null;
		RESULT="Double";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // tipo ::= STRING 
            {
              String RESULT =null;
		RESULT="String";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // variables ::= variables COMA asignacion 
            {
              List<AccionVariable> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<AccionVariable> e1 = (List<AccionVariable>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AccionVariable e2 = (AccionVariable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	String tipo = e1.get(0).getTipoDato();
	e2.setTipoDato(tipo);
	e1.add(e2);
	RESULT = e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variables",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // variables ::= variables COMA declaracion 
            {
              List<AccionVariable> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<AccionVariable> e1 = (List<AccionVariable>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AccionVariable e2 = (AccionVariable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	String tipo = e1.get(0).getTipoDato();
	e2.setTipoDato(tipo);
	e1.add(e2);
	RESULT = e1;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variables",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // variables ::= tipo asignacion 
            {
              List<AccionVariable> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AccionVariable e2 = (AccionVariable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		List<AccionVariable> list = new ArrayList<>();
		e2.setTipoDato(e1);
		list.add(e2);
		RESULT = list;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variables",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // variables ::= tipo declaracion 
            {
              List<AccionVariable> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AccionVariable e2 = (AccionVariable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		List<AccionVariable> list = new ArrayList<>();
		e2.setTipoDato(e1);
		list.add(e2);
		RESULT = list;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variables",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // asignacion ::= IDD ASIGNACION expresion 
            {
              AccionVariable RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion expresion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		Dato dato = new Dato(e.toString(),"VARIABLE",null,true);		
		RESULT = new AccionVariable("ASIGNACION",dato,expresion);	
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // declaracion ::= IDD 
            {
              AccionVariable RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		Dato dato = new Dato(e.toString(),"VARIABLE",null,true);		
		RESULT = new AccionVariable("DECLARACION",dato,null);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // arreglos ::= ARRAY tipo CORCHETE_ABIERTO NUMERO_ENTERO CORCHETE_CERRADO ids 
            {
              Arreglo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object expresion = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Dato> ids = (List<Dato>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		Expresion expr = new Expresion(new Dato(expresion.toString(),"ENTERO",Integer.parseInt(expresion.toString()),false), tablaSimbolos,tablaTipos);
    Arreglo arreglo = new Arreglo(tipo, expr, ids);     
		RESULT = arreglo;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglos",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ids ::= ids COMA IDD 
            {
              List<Dato> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Dato> e1 = (List<Dato>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	Dato dato = new Dato(e2.toString(),"VARIABLE",null,true);
	e1.add(dato);
	RESULT = e1;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ids",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ids ::= IDD 
            {
              List<Dato> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	List<Dato> list = new ArrayList<>();
	Dato dato = new Dato(e.toString(),"VARIABLE",null,true);
	list.add(dato);
	RESULT = list;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ids",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // asignacion_arreglos ::= IDD CORCHETE_ABIERTO NUMERO_ENTERO CORCHETE_CERRADO ASIGNACION expresion 
            {
              List<Instruction> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object numero = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion expresion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		List<Instruction> lista = new ArrayList<>();
		Asignacion asignacion = new Asignacion(new Dato(id.toString(),"ARREGLO",null,true), 1, expresion,true,Integer.parseInt(numero.toString()),tablaSimbolos,tablaTipos);
		lista.add(asignacion);
		RESULT = lista;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_arreglos",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // estructura_if ::= base_if 
            {
              List<Instruction> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BaseIf e = (BaseIf)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		If iff = new If(e,null,null,tablaSimbolos,tablaTipos);
		List<Instruction> lista = new ArrayList<>();
		lista.add(iff);
		RESULT = lista;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_if",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // estructura_if ::= base_if ciclo_elsif 
            {
              List<Instruction> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BaseIf e1 = (BaseIf)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Elsif> e2 = (List<Elsif>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		If iff = new If(e1,e2,null,tablaSimbolos,tablaTipos);
		List<Instruction> lista = new ArrayList<>();
		lista.add(iff);
		RESULT = lista;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_if",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // estructura_if ::= base_if base_else 
            {
              List<Instruction> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BaseIf e1 = (BaseIf)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Else e2 = (Else)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		If iff = new If(e1,null,e2,tablaSimbolos,tablaTipos);
		List<Instruction> lista = new ArrayList<>();
		lista.add(iff);
		RESULT = lista;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_if",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // estructura_if ::= base_if ciclo_elsif base_else 
            {
              List<Instruction> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		BaseIf e1 = (BaseIf)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Elsif> e2 = (List<Elsif>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Else e3 = (Else)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		If iff = new If(e1,e2,e3,tablaSimbolos,tablaTipos);
		List<Instruction> lista = new ArrayList<>();
		lista.add(iff);
		RESULT = lista;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_if",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ciclo_elsif ::= ciclo_elsif base_elsif 
            {
              List<Elsif> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Elsif> e1 = (List<Elsif>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Elsif e2 = (Elsif)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		e1.add(e2);
		RESULT = e1;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_elsif",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ciclo_elsif ::= base_elsif 
            {
              List<Elsif> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Elsif e = (Elsif)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		List<Elsif> lista = new ArrayList<>();
		lista.add(e);
		RESULT = lista;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_elsif",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // base_if ::= IF PARENTESIS_ABIERTO condicional PARENTESIS_CERRADO CORCHETE_ABIERTO instructions CORCHETE_CERRADO 
            {
              BaseIf RESULT =null;
		int condicionalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condicionalright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Condicional condicional = (Condicional)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruction> instructions = (List<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		

		BaseIf base = new BaseIf(condicional,instructions);
		RESULT = base;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("base_if",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // base_else ::= ELSE CORCHETE_ABIERTO instructions CORCHETE_CERRADO 
            {
              Else RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruction> e = (List<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			
		Else sino = new Else(e);
		RESULT = sino;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("base_else",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // base_elsif ::= ELSIF PARENTESIS_ABIERTO condicional PARENTESIS_CERRADO CORCHETE_ABIERTO instructions CORCHETE_CERRADO 
            {
              Elsif RESULT =null;
		int condicionalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condicionalright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Condicional condicional = (Condicional)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruction> instructions = (List<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		Elsif elsif = new Elsif(condicional, instructions);
		RESULT = elsif;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("base_elsif",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // estructura_while ::= WHILE PARENTESIS_ABIERTO condicional PARENTESIS_CERRADO CORCHETE_ABIERTO instructionsCiclo CORCHETE_CERRADO 
            {
              List<Instruction> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Condicional e1 = (Condicional)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruction> e2 = (List<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			While nuevo = new While(e1,e2,tablaSimbolos,tablaTipos);
			List<Instruction> lista = new ArrayList<>();
			lista.add(nuevo);
			RESULT = lista;
			
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_while",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // estructura_while ::= WHILE PARENTESIS_ABIERTO condicional PARENTESIS_CERRADO instructionCiclo 
            {
              List<Instruction> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Condicional e1 = (Condicional)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Instruction> e2 = (List<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			List<Instruction> lista = new ArrayList<>();	
			lista.add(e2.get(0));
			While nuevo = new While(e1,lista,tablaSimbolos,tablaTipos);
			List<Instruction> listaFinal = new ArrayList<>();
			listaFinal.add(nuevo);
			RESULT = listaFinal;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_while",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // estructura_do_while ::= DO CORCHETE_ABIERTO instructionsCiclo CORCHETE_CERRADO WHILE PARENTESIS_ABIERTO condicional PARENTESIS_CERRADO 
            {
              List<Instruction> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		List<Instruction> e1 = (List<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Condicional e2 = (Condicional)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			DoWhile nuevo = new DoWhile(e2,e1,tablaTipos,tablaSimbolos);
			List<Instruction> listaFinal = new ArrayList<>();
			listaFinal.add(nuevo);
			RESULT = listaFinal;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_do_while",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // estructura_do_while ::= DO instructionCiclo WHILE PARENTESIS_ABIERTO condicional PARENTESIS_CERRADO 
            {
              List<Instruction> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		List<Instruction> e1 = (List<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Condicional e2 = (Condicional)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			List<Instruction> lista = new ArrayList<>();
			lista.add(e1.get(0));
			DoWhile nuevo = new DoWhile(e2,lista,tablaTipos,tablaSimbolos);
			List<Instruction> listaFinal = new ArrayList<>();
			listaFinal.add(nuevo);
			RESULT = listaFinal;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_do_while",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // estructura_for ::= FOR PARENTESIS_ABIERTO IDD ASIGNACION expresion DOS_PUNTOS condicional DOS_PUNTOS signo expresion PARENTESIS_CERRADO CORCHETE_ABIERTO instructionsCiclo CORCHETE_CERRADO 
            {
              List<Instruction> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int condicionalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int condicionalright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Condicional condicional = (Condicional)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int signoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int signoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Boolean signo = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int expresion2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int expresion2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion expresion2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruction> lista = (List<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
			Dato dato = new Dato(id.toString(),"VARIABLE",null,true);			
			For nuevo = new For(expr,expresion2,condicional,dato,signo,lista,tablaSimbolos,tablaTipos);
			List<Instruction> listaFinal = new ArrayList<>();
			listaFinal.add(nuevo);
			RESULT = listaFinal;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_for",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // estructura_for ::= FOR PARENTESIS_ABIERTO IDD IGUAL expresion DOS_PUNTOS condicional DOS_PUNTOS signo expresion PARENTESIS_CERRADO instructionCiclo 
            {
              List<Instruction> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int condicionalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int condicionalright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Condicional condicional = (Condicional)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int signoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int signoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Boolean signo = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expresion2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expresion2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion expresion2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int instrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Instruction> instr = (List<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			Dato dato = new Dato(id.toString(),"VARIABLE",null,true);
			List<Instruction> lista = new ArrayList<>();
			lista.add(instr.get(0));
			For nuevo = new For(expr,expresion2,condicional,dato,signo,lista,tablaSimbolos,tablaTipos);
			List<Instruction> listaFinal = new ArrayList<>();
			listaFinal.add(nuevo);
			RESULT = listaFinal;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_for",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // signo ::= SUMA 
            {
              Boolean RESULT =null;
		RESULT = true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("signo",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // signo ::= RESTA 
            {
              Boolean RESULT =null;
		RESULT = false;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("signo",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // estructura_print ::= PRINT CORCHETE_ABIERTO tokens CORCHETE_CERRADO 
            {
              List<Instruction> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Dato> e = (List<Dato>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		

		List<Dato> list = new ArrayList<>();
			for(int i =0;i<e.size();i++){
			  list.add(e.get(i));
			}
			Instruction inst = new Print(list,tablaSimbolos,tablaTipos);
			List<Instruction> instructions = new ArrayList<>();
			instructions.add(inst);
			RESULT = instructions;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_print",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // estructura_print ::= PRINT valor_literal 
            {
              List<Instruction> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dato e = (Dato)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			List<Dato> list = new ArrayList<>();
			list.add(e);
			Instruction inst  = new Print(list,tablaSimbolos,tablaTipos);
			List<Instruction> instructions = new ArrayList<>();
			instructions.add(inst);
			RESULT = instructions;					
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_print",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // estructura_println ::= PRINTLN CORCHETE_ABIERTO tokens CORCHETE_CERRADO 
            {
              List<Instruction> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Dato> e = (List<Dato>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		

			List<Dato> list = new ArrayList<>();
			for(int i =0;i<e.size();i++){
			  list.add(e.get(i));
			}
			Instruction inst = new Println(list,tablaSimbolos,tablaTipos);
			List<Instruction> instructions = new ArrayList<>();
			instructions.add(inst);
			RESULT = instructions;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_println",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // estructura_println ::= PRINTLN valor_literal 
            {
              List<Instruction> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dato e = (Dato)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			List<Dato> list = new ArrayList<>();
			list.add(e);
			Instruction inst = new Println(list,tablaSimbolos,tablaTipos);
			List<Instruction> instructions = new ArrayList<>();
			instructions.add(inst);
			RESULT = instructions;				
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_println",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // tokens ::= tokens COMA valor_literal 
            {
              List<Dato> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Dato> e1 = (List<Dato>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dato e2 = (Dato)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		e1.add(e2);RESULT = e1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tokens",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // tokens ::= valor_literal 
            {
              List<Dato> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dato e = (Dato)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		List<Dato> list = new ArrayList<>(); list.add(e); RESULT = list;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tokens",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expresion ::= expresion SUMA expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Expresion("+",e1,e2,tablaTipos);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expresion ::= expresion RESTA expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Expresion("-",e1,e2,tablaTipos);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expresion ::= expresion MULTIPLICACION expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Expresion("*",e1,e2,tablaTipos);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expresion ::= expresion DIVISION expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Expresion("/",e1,e2,tablaTipos);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expresion ::= expresion MODULO expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Expresion("%",e1,e2,tablaTipos);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expresion ::= RESTA expresion 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Expresion("--",e,tablaTipos);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expresion ::= valor_literal 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dato e = (Dato)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Expresion(e,tablaSimbolos,tablaTipos);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // valor_literal ::= IDD 
            {
              Dato RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new Dato(e.toString(),"VARIABLE",null,true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_literal",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // valor_literal ::= NUMERO_ENTERO 
            {
              Dato RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new Dato(e.toString(),"ENTERO",Integer.parseInt(e.toString()),false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_literal",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // valor_literal ::= NUMERO_DOUBLE 
            {
              Dato RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new Dato(e.toString(),"DOUBLE",Double.parseDouble(e.toString()),false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_literal",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // valor_literal ::= NUMERO_FLOAT 
            {
              Dato RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new Dato(e.toString(),"FLOAT",Float.parseFloat(e.toString()),false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_literal",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // valor_literal ::= NUMERO_LONG 
            {
              Dato RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new Dato(e.toString(),"LONG",Long.parseLong(e.toString()),false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_literal",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // valor_literal ::= LEXEMA_STRING 
            {
              Dato RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new Dato(e.toString(),"STRING",e.toString(),false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_literal",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // valor_literal ::= TRUEE 
            {
              Dato RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new Dato("true","BOOLEAN",true,false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_literal",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // valor_literal ::= FALSEE 
            {
              Dato RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new Dato("false","BOOLEAN",false,false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_literal",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // valor_literal ::= IDD CORCHETE_ABIERTO expresion CORCHETE_CERRADO 
            {
              Dato RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Dato(e1.toString(),"ARREGLO",e2,false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_literal",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // condicional ::= condicional OR condicional 
            {
              Condicional RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Condicional e1 = (Condicional)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Condicional e2 = (Condicional)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Condicional("OR",e1,e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // condicional ::= condicional AND condicional 
            {
              Condicional RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Condicional e1 = (Condicional)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Condicional e2 = (Condicional)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Condicional("AND",e1,e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // condicional ::= NOT condicional 
            {
              Condicional RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Condicional e = (Condicional)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Condicional("NOT",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // condicional ::= condicion 
            {
              Condicional RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Condicional e = (Condicional)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // condicion ::= valor_condicion MAYOR valor_condicion 
            {
              Condicional RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Dato e1 = (Dato)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dato e2 = (Dato)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new Condicional(">", new Condicional(e1, tablaSimbolos), new Condicional(e2, tablaSimbolos));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // condicion ::= valor_condicion MENOR valor_condicion 
            {
              Condicional RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Dato e1 = (Dato)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dato e2 = (Dato)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new Condicional("<", new Condicional(e1, tablaSimbolos), new Condicional(e2, tablaSimbolos));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // condicion ::= valor_condicion MAYOR_IGUAL valor_condicion 
            {
              Condicional RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Dato e1 = (Dato)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dato e2 = (Dato)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new Condicional(">=", new Condicional(e1, tablaSimbolos), new Condicional(e2, tablaSimbolos));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // condicion ::= valor_condicion MENOR_IGUAL valor_condicion 
            {
              Condicional RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Dato e1 = (Dato)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dato e2 = (Dato)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new Condicional("<=", new Condicional(e1, tablaSimbolos), new Condicional(e2, tablaSimbolos));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // condicion ::= valor_condicion DIFERENTE valor_condicion 
            {
              Condicional RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Dato e1 = (Dato)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dato e2 = (Dato)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new Condicional("!=", new Condicional(e1, tablaSimbolos), new Condicional(e2, tablaSimbolos));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // condicion ::= valor_condicion IGUAL valor_condicion 
            {
              Condicional RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Dato e1 = (Dato)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dato e2 = (Dato)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new Condicional("==", new Condicional(e1, tablaSimbolos), new Condicional(e2, tablaSimbolos));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // condicion ::= valor_condicion 
            {
              Condicional RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dato e1 = (Dato)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Condicional(e1,tablaSimbolos);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // valor_condicion ::= IDD 
            {
              Dato RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Dato(e.toString(),"VARIABLE",null,true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_condicion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // valor_condicion ::= TRUEE 
            {
              Dato RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Dato("true","BOOLEAN",true,false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_condicion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // valor_condicion ::= FALSEE 
            {
              Dato RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Dato("false","BOOLEAN",false,false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_condicion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // valor_condicion ::= NUMERO_ENTERO 
            {
              Dato RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new Dato(e.toString(),"ENTERO",Integer.parseInt(e.toString()),false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_condicion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // valor_condicion ::= NUMERO_DOUBLE 
            {
              Dato RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new Dato(e.toString(),"DOUBLE",Double.parseDouble(e.toString()),false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_condicion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // valor_condicion ::= NUMERO_FLOAT 
            {
              Dato RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new Dato(e.toString(),"FLOAT",Float.parseFloat(e.toString()),false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_condicion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // valor_condicion ::= NUMERO_LONG 
            {
              Dato RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new Dato(e.toString(),"LONG",Long.parseLong(e.toString()),false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_condicion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // valor_condicion ::= IDD CORCHETE_ABIERTO NUMERO_ENTERO CORCHETE_CERRADO 
            {
              Dato RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Dato(e1.toString(),"ARREGLO",Integer.parseInt(e2.toString()),false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_condicion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // instructionsCiclo ::= instructionsCiclo instructionCiclo 
            {
              List<Instruction> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruction> e1 = (List<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Instruction> e2 = (List<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		for(int i =0;i<e2.size();i++){
				e1.add(e2.get(i));
		}
		RESULT = e1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instructionsCiclo",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // instructionsCiclo ::= instructionCiclo 
            {
              List<Instruction> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Instruction> e = (List<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instructionsCiclo",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // instructionCiclo ::= asignacion PUNTO_COMA 
            {
              List<Instruction> RESULT =null;
		int accionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int accionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AccionVariable accion = (AccionVariable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
										List<Instruction> instructions = new ArrayList<>();
                  Asignacion asignacion = new Asignacion(accion.getId(), 1, accion.getExpresion(),false,null,tablaSimbolos,tablaTipos);
									instructions.add(asignacion);
									RESULT = instructions;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instructionCiclo",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // instructionCiclo ::= asignacion_arreglos PUNTO_COMA PUNTO_COMA 
            {
              List<Instruction> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Instruction> e = (List<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instructionCiclo",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // instructionCiclo ::= estructura_if 
            {
              List<Instruction> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Instruction> e = (List<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instructionCiclo",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // instructionCiclo ::= estructura_while 
            {
              List<Instruction> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Instruction> e = (List<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instructionCiclo",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // instructionCiclo ::= estructura_do_while 
            {
              List<Instruction> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Instruction> e = (List<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instructionCiclo",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // instructionCiclo ::= estructura_for 
            {
              List<Instruction> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Instruction> e = (List<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instructionCiclo",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // instructionCiclo ::= estructura_print PUNTO_COMA 
            {
              List<Instruction> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruction> e = (List<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instructionCiclo",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // instructionCiclo ::= estructura_println PUNTO_COMA 
            {
              List<Instruction> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruction> e = (List<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instructionCiclo",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
