/* The following code was generated by JFlex 1.7.0 */

 /* codigo de usuario */
package Analizadores.Flex;

import Errores.Errores;
import java.util.ArrayList;
import java_cup.runtime.Symbol;
import Analizadores.Cup.sym;
import Objetos.Logica;
import javax.swing.JTextArea;

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0 from the specification file
 * <tt>/home/jpmazate/Escritorio/Lexer.flex</tt>
 */
public class Lexer implements java_cup.runtime.Scanner {

    /**
     * This character denotes the end of file
     */
    public static final int YYEOF = -1;

    /**
     * initial size of the lookahead buffer
     */
    private static final int ZZ_BUFFERSIZE = 16384;

    /**
     * lexical states
     */
    public static final int YYINITIAL = 0;
    public static final int STRING = 2;
    public static final int COMENTARIO_LINEA = 4;
    public static final int COMENTARIO_BLOQUE = 6;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l at the
     * beginning of a line l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
        0, 0, 1, 1, 2, 2, 3, 3
    };

    /**
     * Translates characters to character classes
     */
    private static final String ZZ_CMAP_PACKED
            = "\11\0\1\1\1\2\1\0\1\1\1\1\22\0\1\1\1\51\1\45"
            + "\2\0\1\65\2\0\1\55\1\56\1\63\1\62\1\53\1\61\1\52"
            + "\1\64\1\66\11\67\1\54\1\44\1\46\1\50\1\47\2\0\1\27"
            + "\2\70\1\30\1\33\1\34\1\70\1\42\1\40\2\70\1\35\1\70"
            + "\1\24\1\25\1\43\1\70\1\31\1\36\1\26\1\32\1\70\1\41"
            + "\1\70\1\37\1\70\1\57\1\0\1\60\3\0\1\7\1\3\1\11"
            + "\1\21\1\6\1\20\1\17\1\12\1\16\2\70\1\5\1\70\1\10"
            + "\1\4\2\70\1\13\1\23\1\15\1\22\3\70\1\14\1\70\1\0"
            + "\1\1\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uff93\0";

    /**
     * Translates characters to character classes
     */
    private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0
            = "\4\0\1\1\1\2\22\3\1\4\1\5\1\6\1\7"
            + "\2\1\1\10\1\11\1\12\1\13\1\14\1\15\1\16"
            + "\1\17\1\20\1\21\1\22\2\23\1\24\1\25\1\26"
            + "\1\2\11\3\1\27\3\3\1\30\3\3\1\31\2\3"
            + "\1\32\1\0\1\33\1\34\1\35\1\36\1\37\2\0"
            + "\4\3\1\40\3\3\1\41\1\3\1\42\2\3\1\43"
            + "\3\3\1\0\1\44\1\3\1\45\1\46\1\47\3\3"
            + "\1\50\1\3\1\51\4\3\1\52\1\53\1\3\1\54"
            + "\2\3\1\55\1\56\1\57\1\60\1\61\1\3\1\62"
            + "\1\63\1\3\1\64\1\65";

    private static int[] zzUnpackAction() {
        int[] result = new int[126];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;
        /* index in packed string  */
        int j = offset;
        /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do {
                result[j++] = value;
            } while (--count > 0);
        }
        return j;
    }

    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0
            = "\0\0\0\71\0\162\0\253\0\344\0\344\0\u011d\0\u0156"
            + "\0\u018f\0\u01c8\0\u0201\0\u023a\0\u0273\0\u02ac\0\u02e5\0\u031e"
            + "\0\u0357\0\u0390\0\u03c9\0\u0402\0\u043b\0\u0474\0\u04ad\0\u04e6"
            + "\0\344\0\344\0\u051f\0\u0558\0\u0591\0\u05ca\0\344\0\344"
            + "\0\344\0\344\0\344\0\344\0\u0603\0\u063c\0\344\0\344"
            + "\0\344\0\u0675\0\u06ae\0\344\0\344\0\344\0\u06e7\0\u0720"
            + "\0\u0759\0\u0792\0\u07cb\0\u0804\0\u083d\0\u0876\0\u08af\0\u08e8"
            + "\0\u0156\0\u0921\0\u095a\0\u0993\0\u0156\0\u09cc\0\u0a05\0\u0a3e"
            + "\0\u0156\0\u0a77\0\u0ab0\0\344\0\u0ae9\0\344\0\344\0\344"
            + "\0\344\0\344\0\u0b22\0\u0b5b\0\u0b94\0\u0bcd\0\u0c06\0\u0c3f"
            + "\0\u0156\0\u0c78\0\u0cb1\0\u0cea\0\u0156\0\u0d23\0\u0156\0\u0d5c"
            + "\0\u0d95\0\u0156\0\u0dce\0\u0e07\0\u0e40\0\u0e79\0\u0eb2\0\u0eeb"
            + "\0\u0156\0\u0156\0\u0156\0\u0f24\0\u0f5d\0\u0f96\0\u0156\0\u0fcf"
            + "\0\u0156\0\u1008\0\u1041\0\u107a\0\u10b3\0\344\0\344\0\u10ec"
            + "\0\u0156\0\u1125\0\u115e\0\u0156\0\u0156\0\u0156\0\u0156\0\u1197"
            + "\0\u11d0\0\u0156\0\u0156\0\u1209\0\u0156\0\u0156";

    private static int[] zzUnpackRowMap() {
        int[] result = new int[126];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;
        /* index in packed string  */
        int j = offset;
        /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0
            = "\1\5\2\6\1\7\1\10\1\11\3\10\1\12\4\10"
            + "\1\13\1\10\1\14\1\15\1\10\1\16\1\17\1\20"
            + "\1\21\1\22\1\23\2\10\1\24\1\25\3\10\1\26"
            + "\1\27\1\10\1\30\1\31\1\32\1\33\1\34\1\35"
            + "\1\36\1\5\1\37\1\40\1\41\1\42\1\43\1\44"
            + "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\10"
            + "\45\54\1\55\23\54\2\6\1\56\147\6\1\57\7\6"
            + "\74\0\1\10\1\60\7\10\1\61\27\10\15\0\1\10"
            + "\4\0\3\10\3\0\41\10\15\0\1\10\4\0\3\10"
            + "\3\0\1\10\1\62\37\10\15\0\1\10\4\0\3\10"
            + "\3\0\7\10\1\63\31\10\15\0\1\10\4\0\3\10"
            + "\3\0\5\10\1\64\33\10\15\0\1\10\4\0\3\10"
            + "\3\0\2\10\1\65\36\10\15\0\1\10\4\0\3\10"
            + "\3\0\1\10\1\66\37\10\15\0\1\10\4\0\3\10"
            + "\3\0\12\10\1\67\26\10\15\0\1\10\4\0\3\10"
            + "\3\0\22\10\1\70\16\10\15\0\1\10\4\0\3\10"
            + "\3\0\26\10\1\71\12\10\15\0\1\10\4\0\3\10"
            + "\3\0\26\10\1\72\12\10\15\0\1\10\4\0\3\10"
            + "\3\0\21\10\1\73\4\10\1\74\12\10\15\0\1\10"
            + "\4\0\3\10\3\0\22\10\1\75\16\10\15\0\1\10"
            + "\4\0\3\10\3\0\32\10\1\76\6\10\15\0\1\10"
            + "\4\0\3\10\3\0\22\10\1\77\1\10\1\100\14\10"
            + "\15\0\1\10\4\0\3\10\3\0\31\10\1\101\7\10"
            + "\15\0\1\10\4\0\3\10\3\0\37\10\1\102\1\10"
            + "\15\0\1\10\4\0\3\10\3\0\26\10\1\103\12\10"
            + "\15\0\1\10\4\0\3\10\50\0\1\104\1\105\7\0"
            + "\1\106\57\0\1\107\70\0\1\110\70\0\1\111\101\0"
            + "\1\112\4\0\1\52\1\53\67\0\1\52\1\53\53\0"
            + "\1\113\70\0\1\113\13\0\2\53\62\0\1\114\12\0"
            + "\1\10\1\115\37\10\15\0\1\10\4\0\3\10\3\0"
            + "\12\10\1\116\26\10\15\0\1\10\4\0\3\10\3\0"
            + "\5\10\1\117\33\10\15\0\1\10\4\0\3\10\3\0"
            + "\4\10\1\120\34\10\15\0\1\10\4\0\3\10\3\0"
            + "\12\10\1\121\26\10\15\0\1\10\4\0\3\10\3\0"
            + "\1\10\1\122\37\10\15\0\1\10\4\0\3\10\3\0"
            + "\17\10\1\123\21\10\15\0\1\10\4\0\3\10\3\0"
            + "\10\10\1\124\30\10\15\0\1\10\4\0\3\10\3\0"
            + "\23\10\1\125\15\10\15\0\1\10\4\0\3\10\3\0"
            + "\27\10\1\126\11\10\15\0\1\10\4\0\3\10\3\0"
            + "\25\10\1\127\13\10\15\0\1\10\4\0\3\10\3\0"
            + "\26\10\1\130\12\10\15\0\1\10\4\0\3\10\3\0"
            + "\33\10\1\131\5\10\15\0\1\10\4\0\3\10\3\0"
            + "\26\10\1\132\12\10\15\0\1\10\4\0\3\10\3\0"
            + "\32\10\1\133\6\10\15\0\1\10\4\0\3\10\3\0"
            + "\35\10\1\134\3\10\15\0\1\10\4\0\3\10\3\0"
            + "\35\10\1\135\3\10\15\0\1\10\4\0\3\10\61\0"
            + "\1\136\75\0\2\137\50\0\1\56\24\0\2\10\1\140"
            + "\36\10\15\0\1\10\4\0\3\10\3\0\3\10\1\141"
            + "\35\10\15\0\1\10\4\0\3\10\3\0\14\10\1\142"
            + "\24\10\15\0\1\10\4\0\3\10\3\0\10\10\1\143"
            + "\30\10\15\0\1\10\4\0\3\10\3\0\4\10\1\144"
            + "\34\10\15\0\1\10\4\0\3\10\3\0\1\145\40\10"
            + "\15\0\1\10\4\0\3\10\3\0\13\10\1\146\25\10"
            + "\15\0\1\10\4\0\3\10\3\0\30\10\1\147\10\10"
            + "\15\0\1\10\4\0\3\10\3\0\24\10\1\150\14\10"
            + "\15\0\1\10\4\0\3\10\3\0\30\10\1\151\4\10"
            + "\1\152\3\10\15\0\1\10\4\0\3\10\3\0\33\10"
            + "\1\153\5\10\15\0\1\10\4\0\3\10\3\0\32\10"
            + "\1\154\6\10\15\0\1\10\4\0\3\10\3\0\21\10"
            + "\1\155\17\10\15\0\1\10\4\0\3\10\61\0\1\156"
            + "\27\0\1\157\45\0\2\137\4\0\3\10\1\160\35\10"
            + "\15\0\1\10\4\0\3\10\3\0\12\10\1\161\26\10"
            + "\15\0\1\10\4\0\3\10\3\0\2\10\1\162\36\10"
            + "\15\0\1\10\4\0\3\10\3\0\5\10\1\163\33\10"
            + "\15\0\1\10\4\0\3\10\3\0\34\10\1\164\4\10"
            + "\15\0\1\10\4\0\3\10\3\0\31\10\1\165\7\10"
            + "\15\0\1\10\4\0\3\10\3\0\30\10\1\166\10\10"
            + "\15\0\1\10\4\0\3\10\3\0\30\10\1\167\10\10"
            + "\15\0\1\10\4\0\3\10\3\0\23\10\1\170\15\10"
            + "\15\0\1\10\4\0\3\10\3\0\4\10\1\171\34\10"
            + "\15\0\1\10\4\0\3\10\3\0\3\10\1\172\35\10"
            + "\15\0\1\10\4\0\3\10\3\0\14\10\1\173\24\10"
            + "\15\0\1\10\4\0\3\10\3\0\32\10\1\174\6\10"
            + "\15\0\1\10\4\0\3\10\3\0\5\10\1\175\33\10"
            + "\15\0\1\10\4\0\3\10\3\0\21\10\1\176\17\10"
            + "\15\0\1\10\4\0\3\10";

    private static int[] zzUnpackTrans() {
        int[] result = new int[4674];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
        int i = 0;
        /* index in packed string  */
        int j = offset;
        /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do {
                result[j++] = value;
            } while (--count > 0);
        }
        return j;
    }


    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String ZZ_ERROR_MSG[] = {
        "Unknown internal scanner error",
        "Error: could not match input",
        "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0
            = "\4\0\2\11\22\1\2\11\4\1\6\11\2\1\3\11"
            + "\2\1\3\11\25\1\1\11\1\0\5\11\2\0\21\1"
            + "\1\0\17\1\2\11\17\1";

    private static int[] zzUnpackAttribute() {
        int[] result = new int[126];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;
        /* index in packed string  */
        int j = offset;
        /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do {
                result[j++] = value;
            } while (--count > 0);
        }
        return j;
    }

    /**
     * the input device
     */
    private java.io.Reader zzReader;

    /**
     * the current state of the DFA
     */
    private int zzState;

    /**
     * the current lexical state
     */
    private int zzLexicalState = YYINITIAL;

    /**
     * this buffer contains the current text to be matched and is the source of
     * the yytext() string
     */
    private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

    /**
     * the textposition at the last accepting state
     */
    private int zzMarkedPos;

    /**
     * the current text position in the buffer
     */
    private int zzCurrentPos;

    /**
     * startRead marks the beginning of the yytext() string in the buffer
     */
    private int zzStartRead;

    /**
     * endRead marks the last character in the buffer, that has been read from
     * input
     */
    private int zzEndRead;

    /**
     * number of newlines encountered up to the start of the matched text
     */
    private int yyline;

    /**
     * the number of characters up to the start of the matched text
     */
    private int yychar;

    /**
     * the number of characters from the last newline up to the start of the
     * matched text
     */
    private int yycolumn;

    /**
     * zzAtBOL == true iff the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;

    /**
     * zzAtEOF == true iff the scanner is at the EOF
     */
    private boolean zzAtEOF;

    /**
     * denotes if the user-EOF-code has already been executed
     */
    private boolean zzEOFDone;

    /**
     * The number of occupied positions in zzBuffer beyond zzEndRead. When a
     * lead/high surrogate has been read from the input stream into the final
     * zzBuffer position, this will have a value of 1; otherwise, it will have a
     * value of 0.
     */
    private int zzFinalHighSurrogate = 0;

    /* user code: */
    String lexema = "";
    String lexemaError = "";

    String lexemaMandar = "";
    ArrayList<Errores> errores;
    JTextArea area;
    Logica logica;

    public Lexer(java.io.Reader in, JTextArea area, ArrayList<Errores> errores) {
        this.zzReader = in;
        this.area = area;
        this.errores = errores;
        this.area = area;
        this.logica = new Logica();

    }

    public void crearLexema(String mandar) {
        lexema = lexema + mandar;
    }

    public void crearLexemaMandar(String mandar) {
        lexemaMandar = lexemaMandar + mandar;
    }

    public void crearLexemaError(String mandar) {
        lexemaError = lexemaError + mandar;
    }

    public void verificarError() {
        if (!lexemaError.equals("")) {
            error(lexemaError);
        }
        lexemaError = "";
    }

    private Symbol symbol(int type) {
        return new Symbol(type, yyline + 1, yycolumn + 1);
    }

    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline + 1, yycolumn + 1, value);
    }

    private void error(String message) {
        System.out.println("\nError Lexico en Fila: " + (yyline + 1) + ", columna " + (yycolumn + 1) + " : " + message + "\n");
        Errores.crearError("LEXICO", "ERROR LEXICO CON LEXEMA: " + message, yyline + 1, yycolumn + 1);
        logica.mostrarError(Errores.ultimoError(),area);
	
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
        this.zzReader = in;
    }

    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed the packed character translation table
     * @return the unpacked character translation table
     */
    private static char[] zzUnpackCMap(String packed) {
        char[] map = new char[0x110000];
        int i = 0;
        /* index in packed string  */
        int j = 0;
        /* index in unpacked array */
        while (i < 196) {
            int count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do {
                map[j++] = value;
            } while (--count > 0);
        }
        return map;
    }

    /**
     * Refills the input buffer.
     *
     * @return      <code>false</code>, iff there was new input.
     *
     * @exception java.io.IOException if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {

        /* first: make room (if you can) */
        if (zzStartRead > 0) {
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
            System.arraycopy(zzBuffer, zzStartRead,
                    zzBuffer, 0,
                    zzEndRead - zzStartRead);

            /* translate stored positions */
            zzEndRead -= zzStartRead;
            zzCurrentPos -= zzStartRead;
            zzMarkedPos -= zzStartRead;
            zzStartRead = 0;
        }

        /* is the buffer big enough? */
        if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
            /* if not: blow it up */
            char newBuffer[] = new char[zzBuffer.length * 2];
            System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
            zzBuffer = newBuffer;
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
        }

        /* fill the buffer with new input */
        int requested = zzBuffer.length - zzEndRead;
        int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

        /* not supposed to occur according to specification of java.io.Reader */
        if (numRead == 0) {
            throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
        }
        if (numRead > 0) {
            zzEndRead += numRead;
            /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
            if (numRead == requested) {
                if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
                    --zzEndRead;
                    zzFinalHighSurrogate = 1;
                }
            }
            /* potentially more input available */
            return false;
        }

        /* numRead < 0 ==> end of stream */
        return true;
    }

    /**
     * Closes the input stream.
     */
    public final void yyclose() throws java.io.IOException {
        zzAtEOF = true;
        /* indicate end of file */
        zzEndRead = zzStartRead;
        /* invalidate buffer    */

        if (zzReader != null) {
            zzReader.close();
        }
    }

    /**
     * Resets the scanner to read from a new input stream. Does not close the
     * old reader.
     *
     * All internal variables are reset, the old input stream
     * <b>cannot</b> be reused (internal buffer is discarded and lost). Lexical
     * state is set to <tt>ZZ_INITIAL</tt>.
     *
     * Internal scan buffer is resized down to its initial length, if it has
     * grown.
     *
     * @param reader the new input stream
     */
    public final void yyreset(java.io.Reader reader) {
        zzReader = reader;
        zzAtBOL = true;
        zzAtEOF = false;
        zzEOFDone = false;
        zzEndRead = zzStartRead = 0;
        zzCurrentPos = zzMarkedPos = 0;
        zzFinalHighSurrogate = 0;
        yyline = yychar = yycolumn = 0;
        zzLexicalState = YYINITIAL;
        if (zzBuffer.length > ZZ_BUFFERSIZE) {
            zzBuffer = new char[ZZ_BUFFERSIZE];
        }
    }

    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }

    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }

    /**
     * Returns the text matched by the current regular expression.
     */
    public final String yytext() {
        return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
    }

    /**
     * Returns the character at position <tt>pos</tt> from the matched text.
     *
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch. A value from 0 to
     * yylength()-1.
     *
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer[zzStartRead + pos];
    }

    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }

    /**
     * Reports an error that occured while scanning.
     *
     * In a wellformed scanner (no or only correct usage of yypushback(int) and
     * a match-all fallback rule) this method will only be called with things
     * that "Can't Possibly Happen". If this method is called, something is
     * seriously wrong (e.g. a JFlex bug producing a faulty scanner etc.).
     *
     * Usual syntax/scanner level error handling should be done in error
     * fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }

    /**
     * Pushes the specified amount of characters back into the input stream.
     *
     * They will be read again by then next call of the scanning method
     *
     * @param number the number of characters to be read again. This number must
     * not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength()) {
            zzScanError(ZZ_PUSHBACK_2BIG);
        }

        zzMarkedPos -= number;
    }

    /**
     * Contains user EOF-code, which will be executed exactly once, when the end
     * of file is reached
     */
    private void zzDoEOF() throws java.io.IOException {
        if (!zzEOFDone) {
            zzEOFDone = true;
            yyclose();
        }
    }

    /**
     * Resumes scanning until the next regular expression is matched, the end of
     * input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @exception java.io.IOException if any I/O-Error occurs
     */
    public java_cup.runtime.Symbol next_token() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        char[] zzBufferL = zzBuffer;
        char[] zzCMapL = ZZ_CMAP;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            boolean zzR = false;
            int zzCh;
            int zzCharCount;
            for (zzCurrentPosL = zzStartRead;
                    zzCurrentPosL < zzMarkedPosL;
                    zzCurrentPosL += zzCharCount) {
                zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
                zzCharCount = Character.charCount(zzCh);
                switch (zzCh) {
                    case '\u000B':  // fall through
                    case '\u000C':  // fall through
                    case '\u0085':  // fall through
                    case '\u2028':  // fall through
                    case '\u2029':
                        yyline++;
                        yycolumn = 0;
                        zzR = false;
                        break;
                    case '\r':
                        yyline++;
                        yycolumn = 0;
                        zzR = true;
                        break;
                    case '\n':
                        if (zzR) {
                            zzR = false;
                        } else {
                            yyline++;
                            yycolumn = 0;
                        }
                        break;
                    default:
                        zzR = false;
                        yycolumn += zzCharCount;
                }
            }

            if (zzR) {
                // peek one character ahead if it is \n (if we have counted one line too much)
                boolean zzPeek;
                if (zzMarkedPosL < zzEndReadL) {
                    zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                } else if (zzAtEOF) {
                    zzPeek = false;
                } else {
                    boolean eof = zzRefill();
                    zzEndReadL = zzEndRead;
                    zzMarkedPosL = zzMarkedPos;
                    zzBufferL = zzBuffer;
                    if (eof) {
                        zzPeek = false;
                    } else {
                        zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                    }
                }
                if (zzPeek) {
                    yyline--;
                }
            }
            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            // set up zzAction for empty match case:
            int zzAttributes = zzAttrL[zzState];
            if ((zzAttributes & 1) == 1) {
                zzAction = zzState;
            }

            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                        zzCurrentPosL += Character.charCount(zzInput);
                    } else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                            zzCurrentPosL += Character.charCount(zzInput);
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
                    if (zzNext == -1) {
                        break zzForAction;
                    }
                    zzState = zzNext;

                    zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) {
                            break zzForAction;
                        }
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                zzAtEOF = true;
                zzDoEOF();
                {
                    return symbol(sym.EOF);
                }
            } else {
                switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                    case 1: {
                        crearLexemaError(yytext());
                    }
                    // fall through
                    case 54:
                        break;
                    case 2: {
                        verificarError();
                    }
                    // fall through
                    case 55:
                        break;
                    case 3: {
                        verificarError();
                        return symbol(sym.IDD, yytext());
                    }
                    // fall through
                    case 56:
                        break;
                    case 4: {
                        verificarError();
                        return symbol(sym.PUNTO_COMA, yytext());
                    }
                    // fall through
                    case 57:
                        break;
                    case 5: {
                        yybegin(STRING);
                    }
                    // fall through
                    case 58:
                        break;
                    case 6: {
                        verificarError();
                        return symbol(sym.MENOR, yytext());
                    }
                    // fall through
                    case 59:
                        break;
                    case 7: {
                        verificarError();
                        return symbol(sym.MAYOR, yytext());
                    }
                    // fall through
                    case 60:
                        break;
                    case 8: {
                        verificarError();
                        return symbol(sym.COMA, yytext());
                    }
                    // fall through
                    case 61:
                        break;
                    case 9: {
                        verificarError();
                        return symbol(sym.DOS_PUNTOS, yytext());
                    }
                    // fall through
                    case 62:
                        break;
                    case 10: {
                        verificarError();
                        return symbol(sym.PARENTESIS_ABIERTO, yytext());
                    }
                    // fall through
                    case 63:
                        break;
                    case 11: {
                        verificarError();
                        return symbol(sym.PARENTESIS_CERRADO, yytext());
                    }
                    // fall through
                    case 64:
                        break;
                    case 12: {
                        verificarError();
                        return symbol(sym.CORCHETE_ABIERTO, yytext());
                    }
                    // fall through
                    case 65:
                        break;
                    case 13: {
                        verificarError();
                        return symbol(sym.CORCHETE_CERRADO, yytext());
                    }
                    // fall through
                    case 66:
                        break;
                    case 14: {
                        verificarError();
                        return symbol(sym.RESTA, yytext());
                    }
                    // fall through
                    case 67:
                        break;
                    case 15: {
                        verificarError();
                        return symbol(sym.SUMA, yytext());
                    }
                    // fall through
                    case 68:
                        break;
                    case 16: {
                        verificarError();
                        return symbol(sym.MULTIPLICACION, yytext());
                    }
                    // fall through
                    case 69:
                        break;
                    case 17: {
                        verificarError();
                        return symbol(sym.DIVISION, yytext());
                    }
                    // fall through
                    case 70:
                        break;
                    case 18: {
                        verificarError();
                        return symbol(sym.MODULO, yytext());
                    }
                    // fall through
                    case 71:
                        break;
                    case 19: {
                        verificarError();
                        if (Integer.parseInt(yytext()) > Math.pow(2, 32)) {
                            return symbol(sym.NUMERO_LONG, yytext());
                        } else {
                            return symbol(sym.NUMERO_ENTERO, yytext());
                        }
                    }
                    // fall through
                    case 72:
                        break;
                    case 20: {
                        crearLexema(yytext());
                    }
                    // fall through
                    case 73:
                        break;
                    case 21: {
                        yybegin(YYINITIAL);
                        return symbol(sym.LEXEMA_STRING, this.lexema);
                    }
                    // fall through
                    case 74:
                        break;
                    case 22: {
                        verificarError();
                        yybegin(YYINITIAL);
                    }
                    // fall through
                    case 75:
                        break;
                    case 23: {
                        verificarError();
                        return symbol(sym.OR, yytext());
                    }
                    // fall through
                    case 76:
                        break;
                    case 24: {
                        verificarError();
                        return symbol(sym.DO, yytext());
                    }
                    // fall through
                    case 77:
                        break;
                    case 25: {
                        verificarError();
                        return symbol(sym.IF, yytext());
                    }
                    // fall through
                    case 78:
                        break;
                    case 26: {
                        verificarError();
                        return symbol(sym.MENOR_IGUAL, yytext());
                    }
                    // fall through
                    case 79:
                        break;
                    case 27: {
                        verificarError();
                        return symbol(sym.ASIGNACION, yytext());
                    }
                    // fall through
                    case 80:
                        break;
                    case 28: {
                        verificarError();
                        return symbol(sym.MAYOR_IGUAL, yytext());
                    }
                    // fall through
                    case 81:
                        break;
                    case 29: {
                        verificarError();
                        return symbol(sym.IGUAL, yytext());
                    }
                    // fall through
                    case 82:
                        break;
                    case 30: {
                        verificarError();
                        return symbol(sym.DIFERENTE, yytext());
                    }
                    // fall through
                    case 83:
                        break;
                    case 31: {
                        verificarError();
                        yybegin(COMENTARIO_LINEA);
                    }
                    // fall through
                    case 84:
                        break;
                    case 32: {
                        verificarError();
                        return symbol(sym.INT, yytext());
                    }
                    // fall through
                    case 85:
                        break;
                    case 33: {
                        verificarError();
                        return symbol(sym.NOT, yytext());
                    }
                    // fall through
                    case 86:
                        break;
                    case 34: {
                        verificarError();
                        return symbol(sym.AND, yytext());
                    }
                    // fall through
                    case 87:
                        break;
                    case 35: {
                        verificarError();
                        return symbol(sym.FOR, yytext());
                    }
                    // fall through
                    case 88:
                        break;
                    case 36: {
                        verificarError();
                        return symbol(sym.NUMERO_DOUBLE, yytext());
                    }
                    // fall through
                    case 89:
                        break;
                    case 37: {
                        verificarError();
                        return symbol(sym.BYTE, yytext());
                    }
                    // fall through
                    case 90:
                        break;
                    case 38: {
                        verificarError();
                        return symbol(sym.LONG, yytext());
                    }
                    // fall through
                    case 91:
                        break;
                    case 39: {
                        verificarError();
                        return symbol(sym.CHAR, yytext());
                    }
                    // fall through
                    case 92:
                        break;
                    case 40: {
                        verificarError();
                        return symbol(sym.TRUEE, yytext());
                    }
                    // fall through
                    case 93:
                        break;
                    case 41: {
                        verificarError();
                        return symbol(sym.ELSE, yytext());
                    }
                    // fall through
                    case 94:
                        break;
                    case 42: {
                        verificarError();
                        yybegin(COMENTARIO_BLOQUE);
                    }
                    // fall through
                    case 95:
                        break;
                    case 43: {
                        verificarError();
                        return symbol(sym.NUMERO_FLOAT, yytext());
                    }
                    // fall through
                    case 96:
                        break;
                    case 44: {
                        verificarError();
                        return symbol(sym.FLOAT, yytext());
                    }
                    // fall through
                    case 97:
                        break;
                    case 45: {
                        verificarError();
                        return symbol(sym.ARRAY, yytext());
                    }
                    // fall through
                    case 98:
                        break;
                    case 46: {
                        verificarError();
                        return symbol(sym.ELSIF, yytext());
                    }
                    // fall through
                    case 99:
                        break;
                    case 47: {
                        verificarError();
                        return symbol(sym.FALSEE, yytext());
                    }
                    // fall through
                    case 100:
                        break;
                    case 48: {
                        verificarError();
                        return symbol(sym.WHILE, yytext());
                    }
                    // fall through
                    case 101:
                        break;
                    case 49: {
                        verificarError();
                        return symbol(sym.PRINT, yytext());
                    }
                    // fall through
                    case 102:
                        break;
                    case 50: {
                        verificarError();
                        return symbol(sym.DOUBLE, yytext());
                    }
                    // fall through
                    case 103:
                        break;
                    case 51: {
                        verificarError();
                        return symbol(sym.STRING, yytext());
                    }
                    // fall through
                    case 104:
                        break;
                    case 52: {
                        verificarError();
                        return symbol(sym.BOOLEAN, yytext());
                    }
                    // fall through
                    case 105:
                        break;
                    case 53: {
                        verificarError();
                        return symbol(sym.PRINTLN, yytext());
                    }
                    // fall through
                    case 106:
                        break;
                    default:
                        zzScanError(ZZ_NO_MATCH);
                }
            }
        }
    }

    /**
     * Converts an int token code into the name of the token by reflection on
     * the cup symbol class/interface sym
     *
     * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
     */
    private String getTokenName(int token) {
        try {
            java.lang.reflect.Field[] classFields = sym.class.getFields();
            for (int i = 0; i < classFields.length; i++) {
                if (classFields[i].getInt(null) == token) {
                    return classFields[i].getName();
                }
            }
        } catch (Exception e) {
            e.printStackTrace(System.err);
        }

        return "UNKNOWN TOKEN";
    }

    /**
     * Same as next_token but also prints the token to standard out for
     * debugging.
     *
     * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
     */
    public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
        java_cup.runtime.Symbol s = next_token();
        System.out.println("line:" + (yyline + 1) + " col:" + (yycolumn + 1) + " --" + yytext() + "--" + getTokenName(s.sym) + "--");
        return s;
    }

    /**
     * Runs the scanner on input files.
     *
     * This main method is the debugging routine for the scanner. It prints
     * debugging information about each returned token to System.out until the
     * end of file is reached, or an error occured.
     *
     * @param argv the command line, contains the filenames to run the scanner
     * on.
     */
    public static void main(String argv[]) {
        if (argv.length == 0) {
            System.out.println("Usage : java Lexer [ --encoding <name> ] <inputfile(s)>");
        } else {
            int firstFilePos = 0;
            String encodingName = "UTF-8";
            if (argv[0].equals("--encoding")) {
                firstFilePos = 2;
                encodingName = argv[1];
                try {
                    java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
                } catch (Exception e) {
                    System.out.println("Invalid encoding '" + encodingName + "'");
                    return;
                }
            }
            for (int i = firstFilePos; i < argv.length; i++) {
                Lexer scanner = null;
                try {
                    java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
                    java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
                    scanner = new Lexer(reader);
                    while (!scanner.zzAtEOF) {
                        scanner.debug_next_token();
                    }
                } catch (java.io.FileNotFoundException e) {
                    System.out.println("File not found : \"" + argv[i] + "\"");
                } catch (java.io.IOException e) {
                    System.out.println("IO error scanning file \"" + argv[i] + "\"");
                    System.out.println(e);
                } catch (Exception e) {
                    System.out.println("Unexpected exception:");
                    e.printStackTrace();
                }
            }
        }
    }

}
